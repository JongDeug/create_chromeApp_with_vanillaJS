
브라우저는 html, css, javascript를 이해할 수 있으며
접근성이 다른 언어들에 비해 매우 뛰어나다.  
프론트 엔드 쪽에는 자바스크립트를 대체할게없다!


html을 동작시키면 접착제 처럼 javascript와 css를 가져온다!


basic data type

number 
string

<variables>
-const 상수: 값이 변하지 않음(constant) 숫자 상수, 문자상수
-let

difference?
const(한 번 선언하면 값을 변경시킬 수 없음)
let(변경 시킬 수 있어)

var도 봤는데? (variable)
var은 옛날에 사용하던건데 외부로부터 보호받지 못해.
let과 똑같이 작동하긴해, 지금도 사용해도돼. 
하지만 더 안전한 const, let을 사용하는게 낫지
걍쓰지마!

<booleans>
true
false
null
undefined : 
초기화가 되지 않았다.
variable is defined but not assigned to any value.

<javascript>
interpreter 언어이다.
하지만, 결론부터 이야기하면 자바스크립트도 컴파일 과정을 거친다. 
다만 자바스크립트 엔진 내부에서 실행중 컴파일이 필요한 경우에 내부에서 컴파일 한다. 

자바스크립트는 실행되는 플랫폼에 따라 인터프리팅과 컴파일이 혼합되어 사용된다. 이 방식은 자바스크립트의 성능을 크게 향상시켰다.


definition is a declaration which allocates storage for that variable(우리 눈에는 안보여서 굳이 이 단어를 안쓰는듯)
initialization is the specification of the initial value to be stored in an object.

<in javascript>

var carname; ==> declare(variable), undefine(value)
var carname="Volvo"; ==> define(value)

자바스크립트에서는 declaration definition 선언과 정의(메모리할당)가 같이되네욤.

헷갈리는 점이 뭐였나면? undefined이라는거였지.
var x; //value!!!!! is not defined. So,
x //undefined

// y variable!!!! is not declared or define. So,
y // y is not defined(변수가 정의되지 않았다.)

즉 undefined이란 값!!!!!(중요)이 해당하는 변수의 메모리에 할당되지 않았다.
null은 declare을 통해 메모리에 할당되었고. 해당하는 변수의 메모리가 null값을 가진다.



<선언과 정의?>
선언 (declaration) : is for informing to the compiler the following infromation, 
name of the variable, type of value it holds and the initial if any it takes.

정의 (definition) : says where the variable gets stored. i.e.(다시말해서,즉) memory for the 
variable is allocated during the definition of the variable.

c는 선언과 정의의 차이가 없음. int a;가 선언인데 정의도 같이된다



여기서 undefined랑 define, declare의 뉘앙스가 다른 것 같아.
undefined 값이 정해져있지 않다는 거고(단어의 뜻 그대로 값이 정의되지않았다.)
내가 찾은 definition이랑 declaration은 컴파일러에게 알리는 동작의 차이를 설명하는거고.


선언을 했을때 메모리가 어떻게 들어가는지는 나중에 책을 보며 찾거나 해봐야겠다.



자 정리를 해봅시다.
자바스크립트에서는 선언과 정의가 동시에 되는 것 같다. c언어처럼!
declare(선언하다)는 변수가 어떤 종류인지, 변수의 이름을 무엇으로 할건지 적는거.
define(정의하다)은 우리가 안보이지만 내부적으로 변수가 메모리에 할당되는것.

var carname; 이렇게 선언을 했을 때 carname을 사용하면 undeclare이 아니라 왜 undefine일까?
값(value)이 스크립트에 선언되지 않았다.도 맞는 말이지만. 내부적으로 볼때 선언된 carname에 해당하는 메모리에! 
값(value)이 정의(define)되지 않았다가 더 정확한 말이다.
그래서 undefine이라는 단어를 쓰는거라 추측할 수 있겠다. 
나중에 좀 더 깊이 공부할 때 다시 설명해보도록하자!


<Array>
const array = [숫자, "문자", 다됨, true, undefined, null];

//comment (주석)

<Objects>

{ } curly bracket

console.log()? 콘솔 객체안에 log가 있는거네

console.log(player.name);
console.log(player["name"]);
this is same thing

const player = {
    name : "jong",
    points : 12,
    handsome : false,
    fat : "little bit" ------------------------> name, points, ... these are properties 
};

//wtf Originally is it not allowed to change? 프로퍼티는 바꿔되는거야? 객체가 const인데?>
player.fat = null;
console.log(player.fat);

---> 객체에 대한 참조를 변경하지 못한다는 것을 의미. 객체의 프로퍼티는 보호되지않는다.
재할당은 불가능하지만 할당된 객체의 내용은 변경할 수 있다.
객체의 내용이 변경되도라도 객체 타입 변수에 할당 주소 값은 변하지 않는다!! 그래서
객체는 const를 사용하는게 좋고 만약 명시적으로 객체 타입 변수의 주소값을 변경해야한다면 let을 사용하는것이
좋다.

//nope! variables in the player object isn't declared const
//but the error occur at this code.
player = false;


<Function>
function divide(a, b){
    console.log(a / b);
}

const player = {
    name: "jong",
    sayHello: function(name){
        console.log("hello! my name is " + name);
    }
};


<Document>
document는 javascirpt에서 object이다. 접근이 가능하다!

javascript는 html의 코드를 동작시키는거 외에 바꾸는거도 가능했구나!

document는 html의 정보를 가지고 있구나!!를 예측할 수 있지
document로 javascript에서 html의 정보를 가져올 수 있다!


<HTML in javascript>
console.dir(???); 오!!! 여러가지가 담겨있네!!

const title = document.getElementById("title");
console.dir(title);
console.log(title.id);

<Searching For Elements>


const title = document.getElementsByClassName("hello"); 
여러 클래스가 있기 때문에 배열이구나!!
그럼 getElementsByClassName은 배열로 가져오는구나!

여러가지 방법이 있는데 니코가 추천하는건
querySelector, querySelectorAll  ==> css 형식으로 가져오는거임.


 getElementsByClassName 얘는 배열로 다 가져와서 내가 선택해야되는데
querySelector는 그러지 않아도 되네!

querySelector는 한개만 가져와! 첫번째꺼 단 하나만 가져와 only!
만약 다가져오고 싶으면 어떡해!!!
바로 querySelectorAll을 사용하면되지!
css에서 사용하는 :nth-child, :first-child 다 사용가능

이 가져온것들에 대해 정리하자면 
html에서는 attribute이고 
javascript에서는 object안에 있는 properties 들이다!


<Events>
title.addEventListener("click", handleTitleClick);
여기서 handleTitleClick()을 했다면 handleTitleClick이 실행되겠지? 선언하지말고 
이름만 넣어야되는구만


<form>
form태그에 감싸져있다면 input안에 있는 button을 누르거나 type이 submit인 input을 클릭하면
제출이된다! <input type="submit" value="Log In">


<Events>
loginForm.addEventListener("submit", function(event){
    event.preventDefault(); 
    console.log(event);
})
어떤 이벤트가 발생했을 때 동작하도록 설정한 함수에 argument로 event정보를 준다.
info.preventDefault(); ==> submit을 하면 페이지를 새로고침하게 되는데 이걸 막아주는게 preventDefault함수
submit event에 대한 정보를 받고 event의 기본 동작이 실행되는걸 막아주는 함수라고 생각하면됨.
영어로 표현해보자면 argument = information about the event that just happened.


<local storage>
궁금하면 mdn window localStorage api 찾아보도록!